name: On merge
on:
  workflow_dispatch:

  push:
    branches: main

jobs:
    static-analysis:
        name: Static Analysis
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Install dependencies
              shell: bash
              run: npm install
            - name: Run linter
              shell: bash
              run: npm run lint
    test:
      needs: static-analysis
      name: Unit test
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v4
          - name: Install dependencies
            shell: bash
            run: npm install
          - name: Run tests with coverage
            shell: bash
            run: npm run test:ci
          - uses: actions/upload-artifact@v4
            with:
              name: unit-test-report
              path: ./html
          - uses: actions/upload-artifact@v4
            with:
              name: coverage-report
              path: ./coverage
    sonarqube:
      needs: test
      name: SonarQube
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: SonarQubeScan
          id: sonar_scan
          uses: SonarSource/sonarqube-scan-action@v5
          with:
            args: >
              -Dsonar.projectKey=ESGI-AL4_DevOps-frontend
              -Dsonar.organization=esgi-al4
              > sonar_output.txt 2>&1
                          # Extraction de l'URL de fin d'analyse
                          SCAN_URL=$(grep "ANALYSIS SUCCESSFUL, you can find the results at:" sonar_output.txt | sed 's/.*results at: //')
                          echo "Scan URL: $SCAN_URL"
                          echo "$SCAN_URL" > ${SCAN_URL}.txt
                          echo "scan_url=${SCAN_URL}.txt" >> $GITHUB_OUTPUT
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        - name: Upload SonarCloud URL artifact
          uses: actions/upload-artifact@v4
          with:
            name: sonar-url
            path: ${{ steps.sonar_scan.outputs.scan_url }}

    build-e2e:
      needs: sonarqube
      name: Build Docker image for E2E
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Login to Docker
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Build the Docker image for E2E
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/devops_front_e2e:latest
            build-args: ENV_FILE=.env.development
    build-deploy:
      needs: sonarqube
      name: Build Docker image for Production and update constant.json
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Update constant.json for production
          run: |
            sed -i 's|"backendUrl": "http://localhost:8000"|"backendUrl": "https://backend-baguette.jbienvenu.fr"|' public/constant.json
            cat public/constant.json

        - name: Login to Docker
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build the Docker image for Production
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/devops_front:latest
            build-args: ENV_FILE=.env.production
    test-e2e:
      needs: build-e2e
      name: E2E test
      runs-on: ubuntu-latest
      services:
          db:
            image: postgres:17.2
            ports:
              - "5432:5432"
            volumes:
              - db_data:/var/lib/postgresql/data
            env:
              POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          api:
            image: baguette42/devops_back:latest
            env:
              DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
              DB_HOST: db
              DB_PORT: 5432
              DB_NAME: ${{ secrets.POSTGRES_DB }}
              DB_USER: ${{ secrets.POSTGRES_USER }}
              DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            ports:
              - "8000:8000"
          web:
            image: baguette42/devops_front_e2e:latest
            env:
              VITE_BACKEND_API: http://api:8000
            ports:
              - "80:80"
      steps:
          - uses: actions/checkout@v4
          - name: Go to tests folder and install dependencies
            run: |
              cd tests
              npm install
          - name: Wait for servicesto be up
            shell: bash
            run: |
              cd tests
              chmod +x ./wait-services.sh
              ./wait-services.sh
          - name: Run e2e tests
            run: |
              cd tests
              npm run e2e:ci

    helm-deploy:
      needs: [ build-deploy, test-e2e ]
      name: Helm Deploy
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        # Installation de Helm
        - name: Install Helm
          uses: azure/setup-helm@v4

        - name: Configure Kubeconfig
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        # DÃ©ploiement via Helm (assurez-vous que votre chart se trouve dans le dossier "helm-chart")
        - name: Deploy Front using Helm
          run: |
            helm upgrade --install frontend-chart ./frontend-chart \
              --namespace baguette-groupe-3